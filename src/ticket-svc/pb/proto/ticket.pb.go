// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: proto/ticket.proto

package ticketpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TicketData represents the dynamic ticket data stored as protobuf
type TicketData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Core required fields
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant    string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Dynamic fields stored as key-value pairs
	Fields        map[string]*FieldValue `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketData) Reset() {
	*x = TicketData{}
	mi := &file_proto_ticket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketData) ProtoMessage() {}

func (x *TicketData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ticket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketData.ProtoReflect.Descriptor instead.
func (*TicketData) Descriptor() ([]byte, []int) {
	return file_proto_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *TicketData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketData) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TicketData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TicketData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TicketData) GetFields() map[string]*FieldValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

// FieldValue represents a dynamic field value with type information
type FieldValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*FieldValue_StringValue
	//	*FieldValue_IntValue
	//	*FieldValue_DoubleValue
	//	*FieldValue_BoolValue
	//	*FieldValue_BytesValue
	//	*FieldValue_StringArray
	Value         isFieldValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	mi := &file_proto_ticket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ticket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_proto_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *FieldValue) GetValue() isFieldValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FieldValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*FieldValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *FieldValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*FieldValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *FieldValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*FieldValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *FieldValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*FieldValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *FieldValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*FieldValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *FieldValue) GetStringArray() *StringArray {
	if x != nil {
		if x, ok := x.Value.(*FieldValue_StringArray); ok {
			return x.StringArray
		}
	}
	return nil
}

type isFieldValue_Value interface {
	isFieldValue_Value()
}

type FieldValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type FieldValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type FieldValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type FieldValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type FieldValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,5,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type FieldValue_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,6,opt,name=string_array,json=stringArray,proto3,oneof"`
}

func (*FieldValue_StringValue) isFieldValue_Value() {}

func (*FieldValue_IntValue) isFieldValue_Value() {}

func (*FieldValue_DoubleValue) isFieldValue_Value() {}

func (*FieldValue_BoolValue) isFieldValue_Value() {}

func (*FieldValue_BytesValue) isFieldValue_Value() {}

func (*FieldValue_StringArray) isFieldValue_Value() {}

// StringArray for storing arrays of strings
type StringArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	mi := &file_proto_ticket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ticket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_proto_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Meta represents event metadata
type Meta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Tenant        string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	OccurredAt    string                 `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	Schema        string                 `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_proto_ticket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ticket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *Meta) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Meta) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Meta) GetOccurredAt() string {
	if x != nil {
		return x.OccurredAt
	}
	return ""
}

func (x *Meta) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

// TicketEvent represents a ticket domain event
type TicketEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *TicketData            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketEvent) Reset() {
	*x = TicketEvent{}
	mi := &file_proto_ticket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketEvent) ProtoMessage() {}

func (x *TicketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ticket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketEvent.ProtoReflect.Descriptor instead.
func (*TicketEvent) Descriptor() ([]byte, []int) {
	return file_proto_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *TicketEvent) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TicketEvent) GetData() *TicketData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_ticket_proto protoreflect.FileDescriptor

const file_proto_ticket_proto_rawDesc = "" +
	"\n" +
	"\x12proto/ticket.proto\x12\bticketpb\"\xfd\x01\n" +
	"\n" +
	"TicketData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06tenant\x18\x02 \x01(\tR\x06tenant\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x04 \x01(\tR\tupdatedAt\x128\n" +
	"\x06fields\x18\x05 \x03(\v2 .ticketpb.TicketData.FieldsEntryR\x06fields\x1aO\n" +
	"\vFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.ticketpb.FieldValueR\x05value:\x028\x01\"\xfe\x01\n" +
	"\n" +
	"FieldValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1d\n" +
	"\tint_value\x18\x02 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x03 \x01(\x01H\x00R\vdoubleValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x04 \x01(\bH\x00R\tboolValue\x12!\n" +
	"\vbytes_value\x18\x05 \x01(\fH\x00R\n" +
	"bytesValue\x12:\n" +
	"\fstring_array\x18\x06 \x01(\v2\x15.ticketpb.StringArrayH\x00R\vstringArrayB\a\n" +
	"\x05value\"%\n" +
	"\vStringArray\x12\x16\n" +
	"\x06values\x18\x01 \x03(\tR\x06values\"r\n" +
	"\x04Meta\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x16\n" +
	"\x06tenant\x18\x02 \x01(\tR\x06tenant\x12\x1f\n" +
	"\voccurred_at\x18\x03 \x01(\tR\n" +
	"occurredAt\x12\x16\n" +
	"\x06schema\x18\x04 \x01(\tR\x06schema\"[\n" +
	"\vTicketEvent\x12\"\n" +
	"\x04meta\x18\x01 \x01(\v2\x0e.ticketpb.MetaR\x04meta\x12(\n" +
	"\x04data\x18\x02 \x01(\v2\x14.ticketpb.TicketDataR\x04dataB2Z0github.com/platform/ticket-svc/pb/proto;ticketpbb\x06proto3"

var (
	file_proto_ticket_proto_rawDescOnce sync.Once
	file_proto_ticket_proto_rawDescData []byte
)

func file_proto_ticket_proto_rawDescGZIP() []byte {
	file_proto_ticket_proto_rawDescOnce.Do(func() {
		file_proto_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ticket_proto_rawDesc), len(file_proto_ticket_proto_rawDesc)))
	})
	return file_proto_ticket_proto_rawDescData
}

var file_proto_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_ticket_proto_goTypes = []any{
	(*TicketData)(nil),  // 0: ticketpb.TicketData
	(*FieldValue)(nil),  // 1: ticketpb.FieldValue
	(*StringArray)(nil), // 2: ticketpb.StringArray
	(*Meta)(nil),        // 3: ticketpb.Meta
	(*TicketEvent)(nil), // 4: ticketpb.TicketEvent
	nil,                 // 5: ticketpb.TicketData.FieldsEntry
}
var file_proto_ticket_proto_depIdxs = []int32{
	5, // 0: ticketpb.TicketData.fields:type_name -> ticketpb.TicketData.FieldsEntry
	2, // 1: ticketpb.FieldValue.string_array:type_name -> ticketpb.StringArray
	3, // 2: ticketpb.TicketEvent.meta:type_name -> ticketpb.Meta
	0, // 3: ticketpb.TicketEvent.data:type_name -> ticketpb.TicketData
	1, // 4: ticketpb.TicketData.FieldsEntry.value:type_name -> ticketpb.FieldValue
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_ticket_proto_init() }
func file_proto_ticket_proto_init() {
	if File_proto_ticket_proto != nil {
		return
	}
	file_proto_ticket_proto_msgTypes[1].OneofWrappers = []any{
		(*FieldValue_StringValue)(nil),
		(*FieldValue_IntValue)(nil),
		(*FieldValue_DoubleValue)(nil),
		(*FieldValue_BoolValue)(nil),
		(*FieldValue_BytesValue)(nil),
		(*FieldValue_StringArray)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ticket_proto_rawDesc), len(file_proto_ticket_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ticket_proto_goTypes,
		DependencyIndexes: file_proto_ticket_proto_depIdxs,
		MessageInfos:      file_proto_ticket_proto_msgTypes,
	}.Build()
	File_proto_ticket_proto = out.File
	file_proto_ticket_proto_goTypes = nil
	file_proto_ticket_proto_depIdxs = nil
}
